import OpenAI from 'openai';
import { BaseVisionProvider } from './base';
import { CaptionResult } from '../types';

export class OpenAIProvider extends BaseVisionProvider {
  id = 'openai:gpt-4o-mini';
  private client: OpenAI;

  constructor(apiKey: string, timeout?: number, maxRetries?: number) {
    super(timeout, maxRetries);
    
    if (!apiKey) {
      throw this.createError('OpenAI API key is required', 500);
    }

    this.client = new OpenAI({
      apiKey,
      timeout: this.timeout,
    });
  }

  async callProvider(imageUrl: string, options: any = {}): Promise<CaptionResult> {
    this.validateImageUrl(imageUrl);
    
    const startTime = Date.now();

    try {
      const result = await this.withRetry(async () => {
        const response = await this.withTimeout(
          this.client.chat.completions.create({
            model: 'gpt-4o-mini',
            messages: [
              {
                role: 'user',
                content: [
                  {
                    type: 'text',
                    text: options.systemPrompt || 'Describe this image in detail for a machine learning dataset. Focus on the main subject, setting, colors, and any notable features. Keep the description concise but informative.'
                  },
                  {
                    type: 'image_url',
                    image_url: {
                      url: imageUrl,
                      detail: 'auto'
                    }
                  }
                ]
              }
            ],
            max_tokens: options.maxTokens || 150,
            temperature: options.temperature || 0.7,
          })
        );

        const caption = response.choices[0]?.message?.content;
        if (!caption) {
          throw this.createError('No caption generated by OpenAI', 500);
        }

        return {
          modelId: this.id,
          caption: caption.trim(),
          latency: Date.now() - startTime,
          tokensUsed: response.usage?.total_tokens
        };
      });

      return result;
    } catch (error) {
      if (error instanceof Error) {
        // Handle specific OpenAI errors
        if (error.message.includes('rate_limit_exceeded')) {
          throw this.createError('OpenAI rate limit exceeded', 429);
        }
        if (error.message.includes('invalid_api_key')) {
          throw this.createError('Invalid OpenAI API key', 401);
        }
        if (error.message.includes('insufficient_quota')) {
          throw this.createError('OpenAI quota exceeded', 402);
        }
        if (error.message.includes('content_policy_violation')) {
          throw this.createError('Content policy violation', 400);
        }
      }

      // Re-throw ProxyError as-is
      if (error instanceof Error && 'statusCode' in error) {
        throw error;
      }

      throw this.createError(`OpenAI API error: ${error instanceof Error ? error.message : 'Unknown error'}`, 500);
    }
  }
}