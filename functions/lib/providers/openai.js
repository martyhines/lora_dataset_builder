"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenAIProvider = void 0;
const openai_1 = __importDefault(require("openai"));
const base_1 = require("./base");
class OpenAIProvider extends base_1.BaseVisionProvider {
    constructor(apiKey, timeout, maxRetries) {
        super(timeout, maxRetries);
        this.id = 'openai:gpt-4o-mini';
        if (!apiKey) {
            throw this.createError('OpenAI API key is required', 500);
        }
        this.client = new openai_1.default({
            apiKey,
            timeout: this.timeout,
        });
    }
    async callProvider(imageUrl, options = {}) {
        this.validateImageUrl(imageUrl);
        const startTime = Date.now();
        try {
            const result = await this.withRetry(async () => {
                var _a, _b, _c;
                const response = await this.withTimeout(this.client.chat.completions.create({
                    model: 'gpt-4o-mini',
                    messages: [
                        {
                            role: 'user',
                            content: [
                                {
                                    type: 'text',
                                    text: options.systemPrompt || 'Describe this image in detail for a machine learning dataset. Focus on the main subject, setting, colors, and any notable features. Keep the description concise but informative.'
                                },
                                {
                                    type: 'image_url',
                                    image_url: {
                                        url: imageUrl,
                                        detail: 'auto'
                                    }
                                }
                            ]
                        }
                    ],
                    max_tokens: options.maxTokens || 150,
                    temperature: options.temperature || 0.7,
                }));
                const caption = (_b = (_a = response.choices[0]) === null || _a === void 0 ? void 0 : _a.message) === null || _b === void 0 ? void 0 : _b.content;
                if (!caption) {
                    throw this.createError('No caption generated by OpenAI', 500);
                }
                return {
                    modelId: this.id,
                    caption: caption.trim(),
                    latency: Date.now() - startTime,
                    tokensUsed: (_c = response.usage) === null || _c === void 0 ? void 0 : _c.total_tokens
                };
            });
            return result;
        }
        catch (error) {
            if (error instanceof Error) {
                // Handle specific OpenAI errors
                if (error.message.includes('rate_limit_exceeded')) {
                    throw this.createError('OpenAI rate limit exceeded', 429);
                }
                if (error.message.includes('invalid_api_key')) {
                    throw this.createError('Invalid OpenAI API key', 401);
                }
                if (error.message.includes('insufficient_quota')) {
                    throw this.createError('OpenAI quota exceeded', 402);
                }
                if (error.message.includes('content_policy_violation')) {
                    throw this.createError('Content policy violation', 400);
                }
            }
            // Re-throw ProxyError as-is
            if (error instanceof Error && 'statusCode' in error) {
                throw error;
            }
            throw this.createError(`OpenAI API error: ${error instanceof Error ? error.message : 'Unknown error'}`, 500);
        }
    }
}
exports.OpenAIProvider = OpenAIProvider;
//# sourceMappingURL=openai.js.map